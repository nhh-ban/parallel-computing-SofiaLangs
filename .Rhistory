library(tidyverse)
library(tictoc)
library(doParallel)
library(tweedie)
library(foreach)
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
printTicTocLog() %>%
knitr::kable()
tic.clearlog()
tic("Regular loop")
source("scripts/Regular_loop.R")
toc(log = TRUE )
printTicTocLog() %>%
knitr::kable()
maxcores<- 6
Cores<-min(parallel::detectCores(), maxcores)
tic(paste0("Parallel loop, ",Cores, "cores") )
source("scripts/Parallel_loop.R")
toc(log = TRUE )
printTicTocLog() %>%
knitr::kable()
tic(paste0("Parallel loop, ",Cores, " cores") )
tic(paste0("Parallel loop, ",Cores, " cores") )
source("scripts/Parallel_loop.R")
toc(log = TRUE )
printTicTocLog() %>%
knitr::kable()
tic.clearlog()
library(furrr)
library(furrr)
library(future)
library(furrr)
library(future)
plan(multiprocess, workers= Cores)
library(furrr)
library(future)
maxcores<- 6
Cores<-min(parallel::detectCores(), maxcores)
plan(multiprocess, workers = Cores)
library(purr)
library(purrr)
plan(multiprocess, workers = Cores)
maxcores<- 6
Cores<-min(parallel::detectCores(), maxcores)
if(.Platform$OS.type=="windows"){
plan(multisession(), workers = Cores)
} else {
plan(multiprocess, worker = Cores)
}
if(.Platform$OS.type=="windows"){
plan(multisession(), workers = Cores)
} else {
plan(multiprocess, workers = Cores)
}
if(.Platform$OS.type=="windows"){
plan(multisession(), workers = Cores)
} else {
plan(multiprocess, workers = Cores)
}
if(.Platform$OS.type=="windows"){
plan(multisession(), workers = Cores)
} else {
plan(future::multiprocess, workers = Cores)
}
library(future)
if(.Platform$OS.type=="windows"){
plan(multisession(), workers = Cores)
} else {
plan(future::multiprocess, workers = Cores)
}
if(.Platform$OS.type=="windows"){
plan(multisession, workers = Cores)
} else {
plan(future::multiprocess, workers = Cores)
}
if(.Platform$OS.type=="windows"){
plan(multisession, workers = Cores)
} else {
plan(future::multiprocess, workers = Cores)
}
if(.Platform$OS.type=="windows"){
plan(multisession, workers = Cores)
} else {
plan(multiprocess, workers = Cores)
}
library(purrr)
library(furrr)
library(future)
#Let us define the number of cores
maxcores<- 6
Cores<-min(parallel::detectCores(), maxcores)
# running the plan command as seen in class I encountered an
#error so I tried a different approach
if(.Platform$OS.type=="windows"){
plan(multisession, workers = Cores)
} else {
plan(multiprocess, workers = Cores)
}
library(purrr)
library(furrr)
library(future)
#Let us define the number of cores
maxcores<- 6
Cores<-min(parallel::detectCores(), maxcores)
# running the plan command as seen in class I encountered an
#error so I tried a different approach
if(.Platform$OS.type=="windows"){
plan(multisession, workers = Cores)
} else {
plan(multiprocess, workers = Cores)
}
#Let us define the number of cores
maxcores<- 6
Cores<-min(parallel::detectCores(), maxcores)
# running the plan command as seen in class I encountered an
#error so I tried a different approach
if(.Platform$OS.type=="windows"){
plan(multisession, workers = Cores)
} else {
plan(multicore(), workers = Cores)
}
maxcores<- 6
Cores<-min(parallel::detectCores(), maxcores)
# running the plan command as seen in class I encountered an
#error so I tried a different approach
if(.Platform$OS.type=="windows"){
plan(multisession, workers = Cores)
} else {
plan(multicore, workers = Cores)
}
df$share_reject<-
future_map_dbl(seq_len(nrow(df)), function(i) {
MTweedieTests(N = df$N[i], M = df$M[i], sig=.05)
})
df$share_reject
